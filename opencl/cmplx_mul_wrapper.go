package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for cmplx_mul kernel invocation
type cmplx_mul_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_a unsafe.Pointer
	 arg_b unsafe.Pointer
	 arg_conjB int
	 arg_N int
	 arg_offset int
	 argptr [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for cmplx_mul kernel invocation
var cmplx_mul_args cmplx_mul_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 cmplx_mul_args.argptr[0] = unsafe.Pointer(&cmplx_mul_args.arg_dst)
	 cmplx_mul_args.argptr[1] = unsafe.Pointer(&cmplx_mul_args.arg_a)
	 cmplx_mul_args.argptr[2] = unsafe.Pointer(&cmplx_mul_args.arg_b)
	 cmplx_mul_args.argptr[3] = unsafe.Pointer(&cmplx_mul_args.arg_conjB)
	 cmplx_mul_args.argptr[4] = unsafe.Pointer(&cmplx_mul_args.arg_N)
	 cmplx_mul_args.argptr[5] = unsafe.Pointer(&cmplx_mul_args.arg_offset)
	 }

// Wrapper for cmplx_mul OpenCL kernel, asynchronous.
func k_cmplx_mul_async ( dst unsafe.Pointer, a unsafe.Pointer, b unsafe.Pointer, conjB int, N int, offset int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("cmplx_mul")
	}

	cmplx_mul_args.Lock()
	defer cmplx_mul_args.Unlock()

	 cmplx_mul_args.arg_dst = dst
	 cmplx_mul_args.arg_a = a
	 cmplx_mul_args.arg_b = b
	 cmplx_mul_args.arg_conjB = conjB
	 cmplx_mul_args.arg_N = N
	 cmplx_mul_args.arg_offset = offset
	

	SetKernelArgWrapper("cmplx_mul", 0, dst)
	SetKernelArgWrapper("cmplx_mul", 1, a)
	SetKernelArgWrapper("cmplx_mul", 2, b)
	SetKernelArgWrapper("cmplx_mul", 3, conjB)
	SetKernelArgWrapper("cmplx_mul", 4, N)
	SetKernelArgWrapper("cmplx_mul", 5, offset)
	

//	args := cmplx_mul_args.argptr[:]
	event := LaunchKernel("cmplx_mul", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("cmplx_mul")
	}

	return event
}

