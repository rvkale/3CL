package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for vartwiddlefa kernel invocation
type vartwiddlefa_args_t struct{
	 arg_dataOut unsafe.Pointer
	 arg_dataIn unsafe.Pointer
	 arg_origlength int
	 arg_extenlength int
	 arg_fftdirec int
	 arg_offset int
	 argptr [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for vartwiddlefa kernel invocation
var vartwiddlefa_args vartwiddlefa_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 vartwiddlefa_args.argptr[0] = unsafe.Pointer(&vartwiddlefa_args.arg_dataOut)
	 vartwiddlefa_args.argptr[1] = unsafe.Pointer(&vartwiddlefa_args.arg_dataIn)
	 vartwiddlefa_args.argptr[2] = unsafe.Pointer(&vartwiddlefa_args.arg_origlength)
	 vartwiddlefa_args.argptr[3] = unsafe.Pointer(&vartwiddlefa_args.arg_extenlength)
	 vartwiddlefa_args.argptr[4] = unsafe.Pointer(&vartwiddlefa_args.arg_fftdirec)
	 vartwiddlefa_args.argptr[5] = unsafe.Pointer(&vartwiddlefa_args.arg_offset)
	 }

// Wrapper for vartwiddlefa OpenCL kernel, asynchronous.
func k_vartwiddlefa_async ( dataOut unsafe.Pointer, dataIn unsafe.Pointer, origlength int, extenlength int, fftdirec int, offset int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("vartwiddlefa")
	}

	vartwiddlefa_args.Lock()
	defer vartwiddlefa_args.Unlock()

	 vartwiddlefa_args.arg_dataOut = dataOut
	 vartwiddlefa_args.arg_dataIn = dataIn
	 vartwiddlefa_args.arg_origlength = origlength
	 vartwiddlefa_args.arg_extenlength = extenlength
	 vartwiddlefa_args.arg_fftdirec = fftdirec
	 vartwiddlefa_args.arg_offset = offset
	

	SetKernelArgWrapper("vartwiddlefa", 0, dataOut)
	SetKernelArgWrapper("vartwiddlefa", 1, dataIn)
	SetKernelArgWrapper("vartwiddlefa", 2, origlength)
	SetKernelArgWrapper("vartwiddlefa", 3, extenlength)
	SetKernelArgWrapper("vartwiddlefa", 4, fftdirec)
	SetKernelArgWrapper("vartwiddlefa", 5, offset)
	

//	args := vartwiddlefa_args.argptr[:]
	event := LaunchKernel("vartwiddlefa", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("vartwiddlefa")
	}

	return event
}

