package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for cmplx_transpose kernel invocation
type cmplx_transpose_args_t struct{
	 arg_dataOut unsafe.Pointer
	 arg_dataIn unsafe.Pointer
	 arg_offset int
	 arg_width int
	 arg_height int
	 argptr [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for cmplx_transpose kernel invocation
var cmplx_transpose_args cmplx_transpose_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 cmplx_transpose_args.argptr[0] = unsafe.Pointer(&cmplx_transpose_args.arg_dataOut)
	 cmplx_transpose_args.argptr[1] = unsafe.Pointer(&cmplx_transpose_args.arg_dataIn)
	 cmplx_transpose_args.argptr[2] = unsafe.Pointer(&cmplx_transpose_args.arg_offset)
	 cmplx_transpose_args.argptr[3] = unsafe.Pointer(&cmplx_transpose_args.arg_width)
	 cmplx_transpose_args.argptr[4] = unsafe.Pointer(&cmplx_transpose_args.arg_height)
	 }

// Wrapper for cmplx_transpose OpenCL kernel, asynchronous.
func k_cmplx_transpose_async ( dataOut unsafe.Pointer, dataIn unsafe.Pointer, offset int, width int, height int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("cmplx_transpose")
	}

	cmplx_transpose_args.Lock()
	defer cmplx_transpose_args.Unlock()

	 cmplx_transpose_args.arg_dataOut = dataOut
	 cmplx_transpose_args.arg_dataIn = dataIn
	 cmplx_transpose_args.arg_offset = offset
	 cmplx_transpose_args.arg_width = width
	 cmplx_transpose_args.arg_height = height
	

	SetKernelArgWrapper("cmplx_transpose", 0, dataOut)
	SetKernelArgWrapper("cmplx_transpose", 1, dataIn)
	SetKernelArgWrapper("cmplx_transpose", 2, offset)
	SetKernelArgWrapper("cmplx_transpose", 3, width)
	SetKernelArgWrapper("cmplx_transpose", 4, height)
	

//	args := cmplx_transpose_args.argptr[:]
	event := LaunchKernel("cmplx_transpose", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("cmplx_transpose")
	}

	return event
}

