// +build ignore

// This program generates Go wrappers for opencl sources.
// The opencl file should contain exactly one __kernel void.

package main

import (
	"flag"
	"fmt"
	"os"
	"text/scanner"
	"text/template"

	"github.com/mumax/3cl/util"
)

func main() {
	flag.Parse()
	for _, fname := range flag.Args() {
		ocl2go(fname)
	}
}

// generate opencl wrapper for file.
func ocl2go(fname string) {
	// open opencl file
	f, err := os.Open(fname)
	util.PanicErr(err)
	defer f.Close()

	// read tokens
	var token []string
	var s scanner.Scanner
	s.Init(f)
	tok := s.Scan()
	for tok != scanner.EOF {
		if !filter(s.TokenText()) {
			token = append(token, s.TokenText())
		}
		tok = s.Scan()
	}

	// find function name and arguments
	funcname := ""
	argstart, argstop := -1, -1
	for i := 0; i < len(token); i++ {
		if token[i] == "__kernel" {
			funcname = token[i+2]
			argstart = i + 4
		}
		if argstart > 0 && token[i] == ")" {
			argstop = i + 1
			break
		}
	}
	argl := token[argstart:argstop]

	// isolate individual arguments
	var args [][]string
	start := 0
	for i, a := range argl {
		if a == "," || a == ")" {
			args = append(args, argl[start:i])
			start = i + 1
		}
	}

	// separate arg names/types and make pointers Go-style
	argn := make([]string, len(args))
	argt := make([]string, len(args))
	for i := range args {
		if args[i][1] == "*" {
			args[i] = []string{args[i][0] + "*", args[i][2]}
		}
		argt[i] = typemap(args[i][0])
		argn[i] = args[i][1]
	}
	wrapgen(fname, funcname, argt, argn)
}

// translate C type to Go type.
func typemap(ctype string) string {
	if gotype, ok := tm[ctype]; ok {
		return gotype
	}
	panic(fmt.Errorf("unsupported OpenCL type: %v", ctype))
}

var tm = map[string]string{"float*": "unsafe.Pointer", "float": "float32", "int": "int", "uint8_t*": "unsafe.Pointer", "uint8_t": "byte"}

// template data
type Kernel struct {
	Name string
	ArgT []string
	ArgN []string
}

var ls []string

// generate wrapper code from template
func wrapgen(filename, funcname string, argt, argn []string) {
	kernel := &Kernel{funcname, argt, argn}
	basename := util.NoExt(filename)
	wrapfname := "../../" + basename + "_wrapper.go"
	wrapout, err := os.OpenFile(wrapfname, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0666)
	util.PanicErr(err)
	defer wrapout.Close()
	util.PanicErr(templ.Execute(wrapout, kernel))
}

// wrapper code template text
const templText = `package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
//	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for {{.Name}} kernel invocation
type {{.Name}}_args_t struct{
	{{range $i, $_ := .ArgN}} arg_{{.}} {{index $.ArgT $i}}
	{{end}} argptr [{{len .ArgN}}]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for {{.Name}} kernel invocation
var {{.Name}}_args {{.Name}}_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	{{range $i, $t := .ArgN}} {{$.Name}}_args.argptr[{{$i}}] = unsafe.Pointer(&{{$.Name}}_args.arg_{{.}})
	{{end}} }

// Wrapper for {{.Name}} OpenCL kernel, asynchronous.
func k_{{.Name}}_async ( {{range $i, $t := .ArgT}}{{index $.ArgN $i}} {{$t}}, {{end}} cfg *config) {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("{{.Name}}")
	}

	{{.Name}}_args.Lock()
	defer {{.Name}}_args.Unlock()

	{{range $i, $t := .ArgN}} {{$.Name}}_args.arg_{{.}} = {{.}}
	{{end}}

//	args := {{.Name}}_args.argptr[:]
//	cl.LaunchKernel({{.Name}}_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, args)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("{{.Name}}")
	}
}

`

// wrapper code template
var templ = template.Must(template.New("wrap").Parse(templText))

// should token be filtered out of stream?
func filter(token string) bool {
	switch token {
	case "__restrict":
		return true
	case "__global":
		return true
	case "__constant":
		return true
	case "__local":
		return true
	case "volatile":
		return true
	case "unsigned":
		return true
	case "signed":
		return true
	case "const":
		return true
	}
	return false
}

