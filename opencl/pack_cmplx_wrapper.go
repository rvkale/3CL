package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for pack_cmplx kernel invocation
type pack_cmplx_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_src unsafe.Pointer
	 arg_count int
	 arg_iOffset int
	 arg_oOffset int
	 argptr [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for pack_cmplx kernel invocation
var pack_cmplx_args pack_cmplx_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 pack_cmplx_args.argptr[0] = unsafe.Pointer(&pack_cmplx_args.arg_dst)
	 pack_cmplx_args.argptr[1] = unsafe.Pointer(&pack_cmplx_args.arg_src)
	 pack_cmplx_args.argptr[2] = unsafe.Pointer(&pack_cmplx_args.arg_count)
	 pack_cmplx_args.argptr[3] = unsafe.Pointer(&pack_cmplx_args.arg_iOffset)
	 pack_cmplx_args.argptr[4] = unsafe.Pointer(&pack_cmplx_args.arg_oOffset)
	 }

// Wrapper for pack_cmplx OpenCL kernel, asynchronous.
func k_pack_cmplx_async ( dst unsafe.Pointer, src unsafe.Pointer, count int, iOffset int, oOffset int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("pack_cmplx")
	}

	pack_cmplx_args.Lock()
	defer pack_cmplx_args.Unlock()

	 pack_cmplx_args.arg_dst = dst
	 pack_cmplx_args.arg_src = src
	 pack_cmplx_args.arg_count = count
	 pack_cmplx_args.arg_iOffset = iOffset
	 pack_cmplx_args.arg_oOffset = oOffset
	

	SetKernelArgWrapper("pack_cmplx", 0, dst)
	SetKernelArgWrapper("pack_cmplx", 1, src)
	SetKernelArgWrapper("pack_cmplx", 2, count)
	SetKernelArgWrapper("pack_cmplx", 3, iOffset)
	SetKernelArgWrapper("pack_cmplx", 4, oOffset)
	

//	args := pack_cmplx_args.argptr[:]
	event := LaunchKernel("pack_cmplx", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("pack_cmplx")
	}

	return event
}

