package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for hermitian2full kernel invocation
type hermitian2full_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_src unsafe.Pointer
	 arg_sz int
	 arg_count int
	 argptr [4]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for hermitian2full kernel invocation
var hermitian2full_args hermitian2full_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 hermitian2full_args.argptr[0] = unsafe.Pointer(&hermitian2full_args.arg_dst)
	 hermitian2full_args.argptr[1] = unsafe.Pointer(&hermitian2full_args.arg_src)
	 hermitian2full_args.argptr[2] = unsafe.Pointer(&hermitian2full_args.arg_sz)
	 hermitian2full_args.argptr[3] = unsafe.Pointer(&hermitian2full_args.arg_count)
	 }

// Wrapper for hermitian2full OpenCL kernel, asynchronous.
func k_hermitian2full_async ( dst unsafe.Pointer, src unsafe.Pointer, sz int, count int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("hermitian2full")
	}

	hermitian2full_args.Lock()
	defer hermitian2full_args.Unlock()

	 hermitian2full_args.arg_dst = dst
	 hermitian2full_args.arg_src = src
	 hermitian2full_args.arg_sz = sz
	 hermitian2full_args.arg_count = count
	

	SetKernelArgWrapper("hermitian2full", 0, dst)
	SetKernelArgWrapper("hermitian2full", 1, src)
	SetKernelArgWrapper("hermitian2full", 2, sz)
	SetKernelArgWrapper("hermitian2full", 3, count)
	KernList["hermitian2full"].SetArgUnsafe(4, cfg.Block[0]*cfg.Block[1]*cfg.Block[2]*SIZEOF_FLOAT32, nil)
	KernList["hermitian2full"].SetArgUnsafe(5, cfg.Block[0]*cfg.Block[1]*cfg.Block[2]*SIZEOF_FLOAT32, nil)
	

//	args := hermitian2full_args.argptr[:]
	event := LaunchKernel("hermitian2full", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("hermitian2full")
	}

	return event
}

