package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for trans_pose kernel invocation
type trans_pose_args_t struct{
	 arg_odata unsafe.Pointer
	 arg_idata unsafe.Pointer
	 arg_offset int
	 arg_width int
	 arg_height int
	 argptr [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for trans_pose kernel invocation
var trans_pose_args trans_pose_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 trans_pose_args.argptr[0] = unsafe.Pointer(&trans_pose_args.arg_odata)
	 trans_pose_args.argptr[1] = unsafe.Pointer(&trans_pose_args.arg_idata)
	 trans_pose_args.argptr[2] = unsafe.Pointer(&trans_pose_args.arg_offset)
	 trans_pose_args.argptr[3] = unsafe.Pointer(&trans_pose_args.arg_width)
	 trans_pose_args.argptr[4] = unsafe.Pointer(&trans_pose_args.arg_height)
	 }

// Wrapper for trans_pose OpenCL kernel, asynchronous.
func k_trans_pose_async ( odata unsafe.Pointer, idata unsafe.Pointer, offset int, width int, height int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("trans_pose")
	}

	trans_pose_args.Lock()
	defer trans_pose_args.Unlock()

	 trans_pose_args.arg_odata = odata
	 trans_pose_args.arg_idata = idata
	 trans_pose_args.arg_offset = offset
	 trans_pose_args.arg_width = width
	 trans_pose_args.arg_height = height
	

	SetKernelArgWrapper("trans_pose", 0, odata)
	SetKernelArgWrapper("trans_pose", 1, idata)
	SetKernelArgWrapper("trans_pose", 2, offset)
	SetKernelArgWrapper("trans_pose", 3, width)
	SetKernelArgWrapper("trans_pose", 4, height)
	KernList["trans_pose"].SetArgUnsafe(5, cfg.Block[0]*cfg.Block[1]*cfg.Block[2]*SIZEOF_FLOAT32, nil)
	

//	args := trans_pose_args.argptr[:]
	event := LaunchKernel("trans_pose", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("trans_pose")
	}

	return event
}

