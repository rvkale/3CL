package opencl

/*
 THIS FILE IS AUTO-GENERATED BY OCL2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3cl/opencl/cl"
	"github.com/mumax/3cl/timer"
	"sync"
)


// Stores the arguments for scaledown kernel invocation
type scaledown_args_t struct{
	 arg_dataOut unsafe.Pointer
	 arg_dataIn unsafe.Pointer
	 arg_length int
	 arg_blulength int
	 arg_offset int
	 argptr [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for scaledown kernel invocation
var scaledown_args scaledown_args_t

func init(){
	// OpenCL driver kernel call wants pointers to arguments, set them up once.
	 scaledown_args.argptr[0] = unsafe.Pointer(&scaledown_args.arg_dataOut)
	 scaledown_args.argptr[1] = unsafe.Pointer(&scaledown_args.arg_dataIn)
	 scaledown_args.argptr[2] = unsafe.Pointer(&scaledown_args.arg_length)
	 scaledown_args.argptr[3] = unsafe.Pointer(&scaledown_args.arg_blulength)
	 scaledown_args.argptr[4] = unsafe.Pointer(&scaledown_args.arg_offset)
	 }

// Wrapper for scaledown OpenCL kernel, asynchronous.
func k_scaledown_async ( dataOut unsafe.Pointer, dataIn unsafe.Pointer, length int, blulength int, offset int,  cfg *config, events []*cl.Event) *cl.Event {
	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Start("scaledown")
	}

	scaledown_args.Lock()
	defer scaledown_args.Unlock()

	 scaledown_args.arg_dataOut = dataOut
	 scaledown_args.arg_dataIn = dataIn
	 scaledown_args.arg_length = length
	 scaledown_args.arg_blulength = blulength
	 scaledown_args.arg_offset = offset
	

	SetKernelArgWrapper("scaledown", 0, dataOut)
	SetKernelArgWrapper("scaledown", 1, dataIn)
	SetKernelArgWrapper("scaledown", 2, length)
	SetKernelArgWrapper("scaledown", 3, blulength)
	SetKernelArgWrapper("scaledown", 4, offset)
	

//	args := scaledown_args.argptr[:]
	event := LaunchKernel("scaledown", cfg.Grid, cfg.Block, events)

	if Synchronous{ // debug
		ClCmdQueue.Finish()
		timer.Stop("scaledown")
	}

	return event
}

